---
# file: roles/update_workflow/tasks/main.yml

- name: Detect workflows installed
  shell: ls /home/{{ user_name }}/provisioned-bundles/ 
  sudo_user: "{{ user_name }}"
  register: provisioned_bundles
  changed_when: false

- name: Copy workflows
  sudo_user: "{{ user_name }}"
  copy: src={{ item }}.zip dest=/home/seqware/released-bundles/{{ item }}.zip owner=seqware group=seqware mode=0755 force=no
  when: '"{{ item }}" not in provisioned_bundles.stdout'
  register: workflows_downloaded
  with_items: workflows

- name: Delete old provisioned bundles (Sanger only)
  sudo_user: "{{ user_name }}"
  shell: rm -r Workflow_Bundle_SangerPancancerCgpCnIndelSnvStr*
  args:
     chdir: /home/{{ user_name }}/provisioned-bundles/
  when: '"Workflow_Bundle_SangerPancancerCgpCnIndelSnvStr" in provisioned_bundles.stdout'
  with_items: workflows

 # note: zip may already have been cleaned up, this is why we're ignoring errors
- name: Setup bundle permissions
  sudo_user: "{{ user_name }}"
  file: path=/home/{{ user_name }}/released-bundles/{{ item }}.zip owner={{ user_name }} group={{ user_name }}
  when: workflows_downloaded.changed
  with_items: workflows

 # This command will fail if '[SeqWare Pipeline] ERROR' is detected in *stdout* (it seems that this is not written to stderr, or at least not in a way that
 # Ansible can properly detect it - maybe because it's the "shell" module calling seqware script which calls the seqware plugin...?)
 # If there is other text that should be tested for, it should be included in the condition in "failed_when"
- name : Install workflow bundles
  sudo_user: "{{ user_name }}"
  shell: /home/{{ user_name }}/bin/seqware bundle install --zip /home/{{ user_name }}/released-bundles/{{ item }}.zip
  when: workflows_downloaded.changed
  args: 
    creates: /home/{{ user_name }}/provisioned-bundles/{{ item }}/  
  with_items: workflows
  register: install_result
  failed_when: "'[SeqWare Pipeline] ERROR' in install_result.stdout"

- name: Remove workflow bundles (from released-bundles dir)
  sudo_user: "{{ user_name }}"
  command: rm /home/{{ user_name }}/released-bundles/{{ item }}.zip removes=/home/{{ user_name }}/released-bundles/{{ item }}.zip
  with_items: workflows
